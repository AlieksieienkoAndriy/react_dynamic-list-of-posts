{"version":3,"sources":["api/api.js","components/PostsList/PostsList.jsx","api/posts.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","index.js"],"names":["BASE_URL","PostsList","selectedUser","getPost","selectedPost","useState","posts","setPosts","useEffect","userId","fetch","then","response","json","result","data","filter","post","className","map","key","id","title","type","onClick","NewCommentForm","addComment","setTitle","name","setName","email","setEmail","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","comments","setComments","visibleComments","setVisibleComments","loadComments","postId","comment","length","url","method","body","userName","JSON","stringify","postComments","App","getSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d1bb280.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, getPost, selectedPost = {} }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getUserPosts(+selectedUser)\n      .then(setPosts);\n  }, [selectedUser, selectedPost]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n\n            {!(selectedPost.id === post.id) ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  getPost(post);\n                }}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  getPost({});\n                }}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUser: PropTypes.string.isRequired,\n  getPost: PropTypes.func.isRequired,\n  selectedPost: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json()\n    .then(result => result.data)\n    .then((posts) => {\n      if (userId === 0) {\n        return posts;\n      }\n\n      return posts.filter(post => (post.userId === userId));\n    }));\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [title, setTitle] = useState('');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addComment(title, email, name);\n        setTitle('');\n        setName('');\n        setEmail('');\n      }}\n\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          className=\"NewCommentForm__input\"\n          placeholder=\"Your name\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          className=\"NewCommentForm__input\"\n          placeholder=\"Your email\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          className=\"NewCommentForm__input\"\n          placeholder=\"Type comment here\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n// eslint-disable-next-line\nimport { deleteComments, getPostComments, postComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  selectedPost,\n\n}) => {\n  const [comments, setComments] = useState([]);\n  const [visibleComments, setVisibleComments] = useState(false);\n\n  const addComment = (title, email, userName) => {\n    postComments(selectedPost.id, title, email, userName)\n      .then(() => {\n        loadComments();\n      });\n  };\n\n  const loadComments = () => {\n    getPostComments(selectedPost.id)\n      .then(setComments);\n  };\n\n  useEffect(() => {\n    loadComments();\n    setVisibleComments(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {visibleComments ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setVisibleComments(false);\n            }}\n          >\n            Hide\n            {' '}\n            {comments.length}\n            {' '}\n            comments\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setVisibleComments(true);\n            }}\n          >\n            Show\n            {' '}\n            {comments.length}\n            {' '}\n            comments\n          </button>\n        )}\n\n        <ul className=\"PostDetails__list\">\n          {visibleComments && comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => {\n                  deleteComments(comment.id)\n                    .then(() => {\n                      loadComments();\n                    });\n                }}\n              >\n                X\n              </button>\n\n              <p>{comment.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPost: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(comments => comments\n    .filter(comment => (comment.postId === postId)));\n\n// eslint-disable-next-line\nexport const postComments = (id, title, email, userName) => fetch(`${BASE_URL}/comments`, {\n  method: `POST`,\n  body: JSON.stringify({\n    postId: id,\n    body: title,\n    email,\n    name: userName,\n  }),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\n// eslint-disable-next-line\nexport const deleteComments = url => fetch(`https://mate-api.herokuapp.com/comments/${url}`, {\n  method: `DELETE`,\n});\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUser, getSelectedUser] = useState('0');\n\n  const [selectedPost, getPost] = useState({\n    id: -1,\n    title: '',\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={(event) => {\n              getSelectedUser(event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            getPost={getPost}\n            selectedPost={selectedPost}\n\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPost.id > -1\n            && (\n              <PostDetails\n                selectedPost={selectedPost}\n              />\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}